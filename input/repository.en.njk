---
layout: base.njk
permalink: repository.en.html
title: Repository – DAKODA Infrastructure
---

<h2 class="repo-title">Repository</h2>
<p class="repo-description">
  Select corpora/datasets to download. Some datasets are only available to authenticated users at German universities.
</p>

<!-- Authentication Button -->
<button class="auth-btn">Authenticate</button>

<!-- Search Bar -->
<input type="text" id="searchInput" placeholder="Search corpora..." class="search-bar">

<!-- Enhanced Filter Bar -->
<div class="filter-bar-enhanced">
  <div class="filter-group-enhanced">
    <div class="filter-item">
      <label for="accessFilter">Access:</label>
      <select id="accessFilter" onchange="filterTable()">
        <option value="all">All</option>
        <option value="open">Open</option>
        <option value="closed">Closed</option>
        <option value="restricted">Restricted</option>
        <option value="special restrictions">Special Restrictions</option>
      </select>
    </div>

    <div class="filter-item">
      <label for="l1Filter">Learner L1(s):</label>
      <select id="l1Filter" onchange="filterTable()">
        <option value="all">All</option>
        <option value="mono">Mono</option>
        <option value="multi">Multi</option>
      </select>
    </div>

    <div class="filter-item">
      <label for="modalityFilter">Modality:</label>
      <select id="modalityFilter" onchange="filterTable()">
        <option value="all">All</option>
        <option value="written">Written</option>
        <option value="spoken">Spoken</option>
      </select>
    </div>

    <!-- CEFR grouped -->
    <div class="filter-item ger">
      <label class="ger-label">CEFR:</label>
      <div class="ger-row">
        <div class="ger-field">
          <label for="gerMinFilter" class="sublabel">Min</label>
          <select id="gerMinFilter" onchange="filterTable()">
            <option value="all">All</option>
            <option value="A1">A1</option>
            <option value="A2">A2</option>
            <option value="B1">B1</option>
            <option value="B2">B2</option>
            <option value="C1">C1</option>
            <option value="C2">C2</option>
          </select>
        </div>
        <div class="ger-field">
          <label for="gerMaxFilter" class="sublabel">Max</label>
          <select id="gerMaxFilter" onchange="filterTable()">
            <option value="all">All</option>
            <option value="A1">A1</option>
            <option value="A2">A2</option>
            <option value="B1">B1</option>
            <option value="B2">B2</option>
            <option value="C1">C1</option>
            <option value="C2">C2</option>
          </select>
        </div>
      </div>
    </div>
    <!-- end CEFR -->
  </div>
</div>

<!-- Legend -->
<div class="repo-legend">
  <span class="legend-title">Legend:</span>
  <span class="legend-item"><span class="legend-swatch open"></span> open</span>
  <span class="legend-item"><span class="legend-swatch closed"></span> closed</span>
  <span class="legend-item"><span class="legend-swatch restricted"></span> restricted</span>
  <span class="legend-item"><span class="legend-swatch special"></span> special restrictions</span>
</div>

{% set tableKeys = [
  "corpus_admin_name",
  "corpus_subcorpus_signet",
  "corpus_admin_availability",
  "corpus_design_l1Type",
  "corpus_proficiency_level",
  "speakers_texts",
  "task_interaction_mode"
] %}

<!-- Repository Table -->
<table class="repo-table">
<thead>
  <tr>
    {% for key in tableKeys %}
      {% if key == "corpus_admin_name" %}
        
        <th rowspan="2" class="sortable" data-sort-key="title" title="{{ key }}">
          {{ display | truncate(35, true, '...') }}
         Corpus title <span class="sort-icon">↕</span>
        </th>
        {# Split Download into two subcolumns #}
        <th colspan="2">Download</th>

      {% elif key == "corpus_subcorpus_signet" %}
        {# Rename to ID #}
        <th rowspan="2" title="{{ key }}">ID</th>

      {% elif key == "corpus_admin_availability" %}
        {# Force label to Access #}
        <th rowspan="2" class="sortable" data-sort-key="availability" title="{{ key }}">
          Access <span class="sort-icon">↕</span>
        </th>

      {% elif key == "corpus_design_l1Type" %}
        {# Force label to Learner L1(s) #}
        <th rowspan="2" class="sortable" data-sort-key="l1type" title="{{ key }}">
          Learner L1(s) <span class="sort-icon">↕</span>
        </th>

      {% elif key == "corpus_proficiency_level" %}
        <th colspan="2">Proficiency level</th>

{% elif key == "speakers_texts" %}
  <th rowspan="2">Speakers / texts</th>


      {% elif key == "task_interaction_mode" %}
       
        <th rowspan="2" class="sortable" data-sort-key="modality" title="{{ key }}">
          {{ display | truncate(35, true, '...') }}
         Modality  <span class="sort-icon">↕</span>
        </th>

      {% else %}
        {% set display = displaynames[key] or key %}
        <th rowspan="2" title="{{ key }}">
          {{ display | truncate(35, true, '...') }}
        </th>
      {% endif %}
    {% endfor %}
  </tr>

  <tr>
    {% for key in tableKeys %}
      {% if key == "corpus_admin_name" %}
        {# DKD + SRC headers #}
        <th>DKD</th>
        <th>SRC</th>
      {% elif key == "corpus_proficiency_level" %}
        <th class="sortable" data-sort-key="cefr-min">
          Min <span class="sort-icon">↕</span>
        </th>
        <th class="sortable" data-sort-key="cefr-max">
          Max <span class="sort-icon">↕</span>
        </th>
      {% endif %}
    {% endfor %}
  </tr>
</thead>

<tbody id="repo-body">
  {# keep all corpora; do not filter them out #}
  {% for corpus in collections.corporaPages %}
    {% if corpus.data.language == "en" %}
    <tr
      data-index="{{ loop.index0 }}"
      data-title="{{ corpus.data.corpus_admin_name | escape }}"
      data-acronym="{{ (corpus.data.corpus_admin_acronym or corpus.data.corpus_subcorpus_signet or corpus.fileSlug) | escape }}"
      data-availability="{{ corpus.data.corpus_admin_availability | lower | trim }}"
      data-l1type="{{ corpus.data.corpus_design_l1Type | emptyIfJR | lower | trim }}"
      data-modality="{{ corpus.data.task_interaction_mode | emptyIfJR | lower | trim }}"
      data-cefr-min="{{ corpus.data.corpus_proficiency_levelMin | emptyIfJR | upper | trim }}"
      data-cefr-max="{{ corpus.data.corpus_proficiency_levelMax | emptyIfJR | upper | trim }}"
    >
      {% for key in tableKeys %}
        {% if key == "corpus_admin_name" %}
          <td class="
            {% if corpus.data.corpus_admin_availability == 'open' %}access-open
            {% elif corpus.data.corpus_admin_availability == 'closed' %}access-closed
            {% elif corpus.data.corpus_admin_availability == 'restricted' %}access-restricted
            {% elif corpus.data.corpus_admin_availability == 'special restrictions' %}access-special
            {% endif %}">
            <a href="/repository/{{ corpus.fileSlug }}/index.en.html" title="{{ corpus.data.corpus_admin_name }}">
              {{ corpus.data.corpus_admin_acronym or corpus.data.corpus_admin_name | truncateTitle(35) }}
            </a>
          </td>

          {# DKD (left) #}
          <td>
            {% set access = corpus.data.corpus_admin_availability | lower %}
            {% set cas = corpus.data.cas_data %}
            {% set txt = corpus.data.plain_text %}
            {% set meta = corpus.data.metadata_csv %}
            {% set hasDkd = cas or txt or meta %}

            {% if access == "open" and hasDkd %}
              <div class="dropdown">
                <button class="dropdown-btn">⤓</button>
                <div class="dropdown-content">
                  {% if meta %}
                    {% if meta | lower | endswith(".xlsx") %}
                      <a href="/data/{{ corpus.fileSlug }}/{{ meta }}">Excel</a>
                    {% else %}
                      <a href="/data/{{ corpus.fileSlug }}/{{ meta }}">CSV</a>
                    {% endif %}
                  {% endif %}
                  {% if txt %}
                    <a href="/data/{{ corpus.fileSlug }}/{{ txt }}">Text</a>
                  {% endif %}
                  {% if cas %}
                    <a href="/data/{{ corpus.fileSlug }}/{{ cas }}">XMI</a>
                  {% endif %}
                </div>
              </div>
            {% else %}
              <span>Not available</span>
            {% endif %}
          </td>

          {# SRC (right) #}
          <td>
            {% set access = corpus.data.corpus_admin_availability | lower %}
            {% set srcRaw = corpus.data.source %}
            {% set src = srcRaw | emptyIfJR %}
            {% if access == "open" and src %}
              <a href="{{ src }}" target="_blank" rel="noopener">Link</a>
            {% else %}
              <span>Not available</span>
            {% endif %}
          </td>



{% elif key == "speakers_texts" %}
  {% set sp = corpus.data.corpus_subcorpus_sizeLearners | jrLabel %}
  {% set tx = corpus.data.corpus_subcorpus_sizeTexts   | jrLabel %}
  <td>
    {% if sp != 'Not available' or tx != 'Not available' %}
      {% if sp != 'Not available' %}{{ sp }}{% else %}Not available{% endif %}
      {% if sp != 'Not available' and tx != 'Not available' %}/{% endif %}
      {% if tx != 'Not available' %}{{ tx }}{% endif %}
    {% else %}
      Not available
    {% endif %}
  </td>



        {% elif key == "corpus_proficiency_level" %}
          <td>{{ corpus.data.corpus_proficiency_levelMin | jrLabel }}</td>
          <td>{{ corpus.data.corpus_proficiency_levelMax | jrLabel }}</td>

        {% elif key == "ANNOTATION" %}
          <td><!-- Annotations --></td>

        {% elif key == "corpus_admin_availability" %}
          <td>{{ corpus.data[key] | cleanJR }}</td>

        {% elif key == "corpus_design_l1Type" %}
          <td>{{ corpus.data[key] | cleanJR }}</td>

        {% elif key == "task_interaction_mode" %}
          <td>{{ corpus.data[key] | cleanJR }}</td>

        {% elif key == "corpus_subcorpus_signet" %}
          <td>{{ corpus.data[key] | cleanJR }}</td>

        {% else %}
          <td>{{ corpus.data[key] | cleanJR }}</td>
        {% endif %}
      {% endfor %}
    </tr>
    {% endif %}
  {% endfor %}
</tbody>
</table>

<script>
function filterTable() {
  const access   = (document.getElementById("accessFilter")?.value || "all").toLowerCase();
  const l1       = (document.getElementById("l1Filter")?.value || "all").toLowerCase();
  const modality = (document.getElementById("modalityFilter")?.value || "all").toLowerCase();
  const gerMin   = (document.getElementById("gerMinFilter")?.value || "all").toUpperCase();
  const gerMax   = (document.getElementById("gerMaxFilter")?.value || "all").toUpperCase();

  const CEFR = ['A1','A2','B1','B2','C1','C2'];
  const rxCEFR = /(A1|A2|B1|B2|C1|C2)/i;

  function idx(val) {
    if (!val) return -1;
    const m = String(val).match(rxCEFR);
    return m ? CEFR.indexOf(m[1].toUpperCase()) : -1;
  }

  let minBound = gerMin === 'ALL' ? -Infinity : CEFR.indexOf(gerMin);
  let maxBound = gerMax === 'ALL' ?  Infinity : CEFR.indexOf(gerMax);
  if (Number.isFinite(minBound) && Number.isFinite(maxBound) && minBound > maxBound) {
    const t = minBound; minBound = maxBound; maxBound = t;
  }

  const rows = document.querySelectorAll("#repo-body tr");
  rows.forEach(row => {
    const rAccess = (row.dataset.availability || "").toLowerCase();
    const rL1     = (row.dataset.l1type || "").toLowerCase();
    const rMod    = (row.dataset.modality || "").toLowerCase();

    const rMinIdx = idx(row.dataset.cefrMin);
    const rMaxIdx = idx(row.dataset.cefrMax);

    const accOK = access === "all" || rAccess === access;
    const l1OK  = l1 === "all" || rL1 === l1;
    const modOK = modality === "all" || rMod === modality;

    const anyGerSelected = (gerMin !== 'ALL') || (gerMax !== 'ALL');
    let gerOK = true;
    if (anyGerSelected) {
      if (rMinIdx === -1 && rMaxIdx === -1) {
        gerOK = false;
      } else {
        const rowMin = (rMinIdx === -1) ? -Infinity : rMinIdx;
        const rowMax = (rMaxIdx === -1) ?  Infinity : rMaxIdx;
        gerOK = rowMin >= minBound && rowMax <= maxBound;
      }
    }

    row.style.display = (accOK && l1OK && modOK && gerOK) ? "" : "none";
  });
}

window.addEventListener("DOMContentLoaded", () => {
  filterTable();
});
</script>

<script>
(function () {
  const tbody = document.getElementById('repo-body');
  if (!tbody) return;

  const ORDER = {
    availability: ['open', 'closed', 'restricted', 'special restrictions'],
    l1type: ['mono', 'multi'],
    modality: ['written', 'spoken', 'spoken; written'],
    cefr: ['A1','A2','B1','B2','C1','C2']
  };

  const rows = Array.from(tbody.querySelectorAll('tr'));
  rows.forEach((r, i) => {
    if (!r.dataset.index) r.dataset.index = i;
  });

  const ths = document.querySelectorAll('th.sortable');

  ths.forEach(th => {
    th.addEventListener('click', () => {
      const key = th.dataset.sortKey;

      const isAsc  = th.classList.contains('asc');
      const isDesc = th.classList.contains('desc');

      ths.forEach(t => t.classList.remove('asc','desc'));

      if (!isAsc && !isDesc) {
        th.classList.add('asc');
        sortAndRender(key, 'asc');
      } else if (isAsc) {
        th.classList.add('desc');
        sortAndRender(key, 'desc');
      } else {
        updateIcons();
        const restored = rows.slice().sort((a,b) => (+a.dataset.index) - (+b.dataset.index));
        restored.forEach(r => tbody.appendChild(r));
        return;
      }

      updateIcons();
    });
  });

  function updateIcons() {
    ths.forEach(th => {
      const icon = th.querySelector('.sort-icon');
      if (!icon) return;
      if (th.classList.contains('asc')) icon.textContent = '▲';
      else if (th.classList.contains('desc')) icon.textContent = '▼';
      else icon.textContent = '↕';
    });
  }

  function sortAndRender(key, dir) {
    const sorted = rows.slice().sort((a, b) => cmp(a, b, key, dir));
    sorted.forEach(r => tbody.appendChild(r));
  }

  function cmp(a, b, key, dir) {
    let c = 0;
    switch (key) {
      case 'title': {
        const av = (a.dataset.acronym || a.dataset.title || '').toLowerCase();
        const bv = (b.dataset.acronym || b.dataset.title || '').toLowerCase();
        c = av.localeCompare(bv, undefined, {sensitivity:'base'});
        break;
      }
      case 'availability':
        c = orderCompare(a.dataset.availability, b.dataset.availability, ORDER.availability);
        break;

      case 'l1type':
        c = orderCompare(a.dataset.l1type, b.dataset.l1type, ORDER.l1type);
        break;

      case 'modality':
        c = orderCompare(a.dataset.modality, b.dataset.modality, ORDER.modality);
        break;

      case 'cefr-min':
        c = cefrCompare(a.dataset.cefrMin, b.dataset.cefrMin);
        break;

      case 'cefr-max':
        c = cefrCompare(a.dataset.cefrMax, b.dataset.cefrMax);
        break;

      default: {
        const av = (a.dataset.title || '').toLowerCase();
        const bv = (b.dataset.title || '').toLowerCase();
        c = av.localeCompare(bv, undefined, {sensitivity:'base'});
      }
    }
    return dir === 'asc' ? c : -c;
  }

  function orderCompare(a, b, order) {
    const ai = orderIndex(a, order), bi = orderIndex(b, order);
    return ai - bi;
  }
  function orderIndex(v, order) {
    v = (v || '').toLowerCase().trim();
    const i = order.indexOf(v);
    return i === -1 ? Number.POSITIVE_INFINITY : i;
  }
  function cefrCompare(a, b) {
    const CEFR = ORDER.cefr;
    const ai = CEFR.indexOf((a||'').toUpperCase().trim());
    const bi = CEFR.indexOf((b||'').toUpperCase().trim());
    return (ai === -1 ? Number.POSITIVE_INFINITY : ai) - (bi === -1 ? Number.POSITIVE_INFINITY : bi);
  }
})();
</script>
